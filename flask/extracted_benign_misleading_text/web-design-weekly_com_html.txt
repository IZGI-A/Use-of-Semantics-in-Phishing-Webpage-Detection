Rationalizing Functional CSS
This post by Marcelo Somers looks at the good and bad parts of writing functional CSS.
I loved writing really clever, powerful CSS classes. I argued for it because of “ease of developer consumption.” My goal was that a developer could add a single class to an element and it would automagically do everything for them. Basically, the opposite of functional CSS.
3 months into a functional approach to CSS architecture, I’m addicted. The times I’ve used the old monolith approach, it’s become a tedious challenge in jumping between files constantly. I think I’m convinced, but I’m still trying to rationalize scalability issues as my functional codebases grow and evolve.
I’m a massive fan of functional CSS and would highly recommend experimenting.
jQuery 3.0 Final Released!
jQuery 3.0 is now released! This version has been in the works since October 2014. We set out to create a slimmer, faster version of jQuery (with backwards compatibility in mind). We’ve removed all of the old IE workarounds and taken advantage of some of the more modern web APIs where it made sense.
In a nutshell:
- Faster
- Deleted oldIE code
- Slim version (removes ajax/effects)
- Promises/A+ Deferred
What are you waiting for! Go and update your version of jQuery
Diffee
Instant visual diffing with CSS blend modes!
A handy little site built by Una Kravets that enables you to easily compare your development site against your production one. Oh and you can even test locally hosted addresses which is awesome.