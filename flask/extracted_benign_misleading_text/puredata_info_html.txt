Pure Data
Welcome to the Pure Data site!
This site is a contribution of the IEM to the Pure Data community. Every Pure Data user who wants to contribute is welcome to join this portal and write/contribute some documentation, reports, news, comments and announcing events. The site is run on a Linux server with Zope / plone and administrated and driven by the Pure Data community.
About Pure Data (aka Pd)
Pure Data (or just
Pd) is an open source visual programming language for multimedia. Its main distribution (aka
Pd Vanilla) is developed by Miller Puckette. Pd-L2ork/Purr-Data is an alternative distribution (originally based on the now unmaintained, dead and deprecated Pd-Extended project), with a revamped GUI and many included external libraries.
Get Pure Data (Linux/Mac/Windows)
Download Pure Data
What's New? As of Pd 0.47-0, the Deken library manager is included for easy access to community-developed external libraries that expand the capabilities of Pd such as Cyclone, zexy, and the computer graphics library Gem. For more details on new developments, see the Release notes.
Download Pd-L2ork 2.x (Purr Data)
What's New? Pd-L2ork has a new cross-platform 2.x version nicknamed Purr Data. Pd-L2ork 1.x is still available as well (Linux only), whereas Purr Data is available for Linux/Mac/Windows. More details in the linked download pages.
Find other Pd goodies to download at the Downloads page
More about Pure Data
Pure Data is an open source visual programming environment that runs on anything from personal computers to embedded devices (ie Raspberry Pi) and smartphones (via libpd, DroidParty (Android), and PdParty (iOS). It is a major branch of the family of patcher programming languages known as Max (Max/FTS, ISPW Max, Max/MSP, etc), originally developed by Miller Puckette at IRCAM.
Pd enables musicians, visual artists, performers, researchers, and developers to create software graphically without writing lines of code. Pd can be used to process and generate sound, video, 2D/3D graphics, and interface sensors, input devices, and MIDI. Pd can easily work over local and remote networks to integrate wearable technology, motor systems, lighting rigs, and other equipment. It is suitable for learning basic multimedia processing and visual programming methods as well as for realizing complex systems for large-scale projects.
Algorithmic functions are represented in Pd by visual boxes called objects placed within a patching window called a canvas. Data flow between objects are achieved through visual connections called patch cords. Each object performs a specific task, which can vary in complexity from very low-level mathematical operations to complicated audio or video functions such as reverberation, FFT transformations, or video decoding. Objects include core Pd vanilla objects, external objects or externals (Pd objects compiled from C or C++), and abstractions (Pd patches loaded as objects).
Documentation and resources
Please check the documentation page, where you can find Resources to start learning, Books about Pd, Manuals and more!
Also check out the Pure Data patch Repository
Find Pd people on Facebook and Reddit and join us on our mailing list (more on the Community page )