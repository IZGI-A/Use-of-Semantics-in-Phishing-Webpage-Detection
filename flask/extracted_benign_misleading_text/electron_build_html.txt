electron-builder ¶
A complete solution to package and build a ready for distribution Electron app for macOS, Windows and Linux with “auto update” support out of the box.
- NPM packages management:
- Native application dependencies compilation (including Yarn support).
- Development dependencies are never included. You don’t need to ignore them explicitly.
- Two package.json structure is supported, but you are not forced to use it even if you have native production dependencies.
- Code Signing on a CI server or development machine.
- Auto Update ready application packaging.
- Numerous target formats:
- All platforms:
7z,
zip,
tar.xz,
tar.lz,
tar.gz,
tar.bz2,
dir(unpacked directory).
- macOS:
dmg,
pkg,
mas,
mas-dev.
- Linux: AppImage, snap, debian package (
deb),
rpm,
freebsd,
pacman,
p5p,
apk.
- Windows:
nsis(Installer),
nsis-web(Web installer),
portable(portable app without installation), AppX (Windows Store), Squirrel.Windows.
- All platforms:
- Publishing artifacts to GitHub Releases, Amazon S3, DigitalOcean Spaces and Bintray.
- Advanced building:
- Pack in a distributable format already packaged app.
- Separate build steps.
- Build and publish in parallel, using hard links on CI server to reduce IO and disk space usage.
- electron-compile support (compile for release-time on the fly on build).
- Docker images to build Electron app for Linux or Windows on any platform.
- Proton Native support.
- Downloads all required tools files on demand automatically (e.g. to code sign windows application, to make AppX), no need to setup.
|Question
|Answer
|“I want to configure electron-builder”
|See options
|“I have a question”
|Open an issue or join the chat
|“I found a bug”
|Open an issue
|“I want to support development”
|Donate
Installation¶
Yarn is strongly recommended instead of npm.
yarn add electron-builder --dev
Boilerplates¶
- electron-webpack-quick-start — A bare minimum project structure to get started developing with electron-webpack. Recommended.
- electron-react-boilerplate A boilerplate for scalable cross-platform desktop apps.
- electron-react-redux-boilerplate A minimal boilerplate to get started with Electron, React and Redux.
- electron-boilerplate A minimalistic yet comprehensive boilerplate application.
- Vue CLI 3 plugin for Electron A Vue CLI 3 plugin for Electron with no required configuration.
Quick Setup Guide¶
electron-webpack-quick-start is a recommended way to create a new Electron application.
-
Specify the standard fields in the application
package.json— name,
description,
versionand author.
-
Specify the build configuration in the
package.jsonas follows:See all options. Option files to indicate which files should be packed in the final application, including the entry file, maybe required.
"build": { "appId": "your.id", "mac": { "category": "your.app.category.type" } }
-
Add icons.
-
Add the scripts key to the development
package.json:Then you can run
"scripts": { "pack": "electron-builder --dir", "dist": "electron-builder" }
yarn dist(to package in a distributable format (e.g. dmg, windows installer, deb package)) or
yarn pack(only generates the package directory without really packaging it. This is useful for testing purposes).
To ensure your native dependencies are always matched electron version, simply add script
"postinstall": "electron-builder install-app-deps"to your
package.json.
-
If you have native addons of your own that are part of the application (not as a dependency), set nodeGypRebuild to
true.
Please note that everything is packaged into an asar archive by default.
For an app that will be shipped to production, you should sign your application. See Where to buy code signing certificates.
Programmatic Usage¶
See
node_modules/electron-builder/out/index.d.ts. Typings for TypeScript is provided.
"use strict"
const builder = require("electron-builder")
const Platform = builder.Platform
// Promise is returned
builder.build({
targets: Platform.MAC.createTarget(),
config: {
"//": "build options, see https://goo.gl/QQXmcV"
}
})
.then(() => {
// handle result
})
.catch((error) => {
// handle error
})
Pack Only in a Distributable Format¶
You can use electron-builder only to pack your electron app in a AppImage, Snaps, Debian package, NSIS, macOS installer component package (
pkg)
and other distributable formats.
./node_modules/.bin/electron-builder --prepackaged <packed dir>
--projectDir (the path to project directory) option also can be useful.
Debug¶
Set the
DEBUG environment variable to debug what electron-builder is doing:
DEBUG=electron-builder
FPM_DEBUG env to add more details about building linux targets (except snap and appimage).
cmd
On Windows the environment variable is set using the set command.
set DEBUG=electron-builder
PowerShell
PowerShell uses different syntax to set environment variables.
$env:DEBUG=electron-builder
Community¶
electron-builder on Zulip.