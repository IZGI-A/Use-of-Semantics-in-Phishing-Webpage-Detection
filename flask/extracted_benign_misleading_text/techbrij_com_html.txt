For a web developer, it is common to view & analyze the JSON returned by an API to the browser and generally, Chrome Developer tools is used for this. You can click on Network tab, select the XHR item and can get JSON in Response and Preview tabs in Chrome developer tools. Fortunately, there are quite a few free online JSON viewers that you can use. Now, BrijPad 2.0 also allows you to inspect and analyze JSON quickly. You can paste the JSON code and visualize the data. I saw many online tools but didn’t get any tool which filters JSON by selecting field in TreeView (It is very helpful in case of large JSON) so I decided to implement it and added it in BrijPad 2.0.
Read Also: Chrome Developer Tools: Inspect JSON path and extract data quickly
Recently, I introduced #TechBrijTips, A micro-blogging section on this website which has content like twitter posts. It is different from regular blog posts as it doesn’t have any specific title. So I had a question what to display in the RSS feed of WordPress. It doesn’t look good to me to display first few words of the main content. I decided to display title from Excerpt. In this post, we will see how to implement it.
The beauty of Microblogging is that you can express yourself in lesser words and can share frequent and brief information on web. As its name suggests, a microblog post is based on micro (i.e. short) post. It requires less time and effort. Ideas, information and thoughts can be shared instantly once they come into your mind. So, I decided to setup Microblogging platform on TechBrij and added #TechBrijTips section to share knowledge, tips, the latest news and useful resources related to web development. As it needs less time to spend on researching a specific topic, being a part time blogger, it will be helpful to increase community and reader engagements.
I am fan of TortoiseGit on Windows as Git client. It displays icons on files and folders of the repository in file explorer which is easy to know the status. You can perform different repository operations in the explorer itself without open a standalone app for Git. Nowadays, I am using Ubuntu so much. So, I need the same in Ubuntu 18.
On googling, I found RabbitVCS. It is a graphical front-end for version control systems available on Linux and it integrates into file managers to provide file context menu access to version control repositories like TortoiseGit.
In Part 1 to 4, we went through solidity to develop smart contract in Remix, setup development environment, created unit testing methods for smart contract, created a front-end application with Node.js to interact with smart contracts. Now, we will deploy smart contract using truffle and infura. Also, will deploy Node.js application to Heroku.
In Part-3, we created unit test methods for smart contract. Now, we will create a simple webpage to interact with the smart contract. The goal is to create a page with a textbox to enter name, buttons to save name and to get message.
In Part-2, we deployed our smart contract on local private Ethereum blockchain. Now, we will test out our Solidity smart contracts behaviour with unit testing with Truffle which uses Chai and Mocha frameworks. In web development lifecycle, unit testing is needed to do to ensure the code is working the way as it is expected. So let’s start it by creating a test file by running following command:
In Part-1, we made Hello World contract in Remix. As we have to write code in the files and manage in repository for development perspective so in this blog post, we will setup our development environment, a private Ethereum blockchain on local machine and deploy our smart contract on the blockchain. I am using Ubuntu 18 for writing this post. But can be setup on Windows and MAC machines.
In this tutorial series, we are going to build a simple Hello World Dapp (decentralized application) on Ethereum with Solidity, Truffle & Web3 tech stack. After this, we will deploy it to test network (Infura and Heroku). This dapp will simply store and retrieve user input text on Ethereum.
In part one, we’ll write a smart contract in Solidity using Remix. Let’s build a simple ‘Hello World’ application (The best way to learn new technologies). It is assumed you know the basics of Blockchain and its terminology. Here is quick intro of some terms:
This tutorial explains how to implement to get a JavaScript date object from user selected date time & timezone and the date object can be sent server side to save or for further processing. HTML5 provides input type
datetime-local allows user to enter both a date and a time and the user’s local time zone is used. For simplicity, Let’s enhance this to allow user to select any timezone. We are going to use Moment-Timezone library.
If you have experience on ASP.NET MVC then probably you are familiar with async/await keywords in C#. The same thing is now in JavaScript. Before that, Callbacks and Promises are used for asynchronous code. Async/await is built on top of promises and non blocking. The power of Async/await provides asynchronous code look like synchronous code. In this article, we will go through serial/chain and parallel flow and implement a complex flow using Async/Await.
Read Also: JavaScript Promises: Understanding Error Handling with Example
It’s time to welcome HISAAB, a simple online speech recognition app, for tracking your expenses with your voice i.e. no need to type. It will help you to note your expenses and calculate the total amount quickly. It allows you to Copy, Email, Save or Print the data. It supports English and Hindi languages.
In my post, I explained how to test server side REST APIs in Node.js using Mocha, Sinon and Chai. I used ES6 test methods for this and Babel is used to execute it. As test methods are executed at development end, so NO need to transpile ES6 to ES5 first and then debug the converted files. You can directly debug ES6 code with Babel.
Do you want to set up an API versioning in Node.js and Express environment? This tutorial explains the different ways to do REST API versioning step by step. We will implement the following routing for the versioning:
GET /api/v1.0/
POST /api/v1.0/
GET /api/v2.0/
POST /api/v2.0/
In this post, we will implement to get all files recursively in a directory using Node.js. Also, will restrict it to traverse directory with limited recursively depth.
Before we get started, consider the following directory structure(For simplicity, the name is according to their depth level i.e. folder 1, sub folder 1.1, sub sub folder 1.1.1…etc):
1 > 1.1 > 1.1.1> 1.1.1.1 > 1.1.1.1.1
2 > 2.1 > 2.1.1
> 2.2
Each directory has txt file with same directory name(means 1.1 will have 1.1.txt file).